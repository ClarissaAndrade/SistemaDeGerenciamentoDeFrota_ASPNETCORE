// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGF.Models;

namespace SGF.Migrations
{
    [DbContext(typeof(SGFContext))]
    [Migration("20210224013446_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SGF.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DryCargoId");

                    b.Property<int>("IdEstado");

                    b.Property<string>("Name");

                    b.Property<int?>("ShippingCompanyId");

                    b.HasKey("Id");

                    b.HasIndex("DryCargoId");

                    b.HasIndex("ShippingCompanyId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("SGF.Models.DCExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("DryCargoId");

                    b.Property<bool>("PayedByDriver");

                    b.Property<int?>("TypeId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("DryCargoId");

                    b.HasIndex("TypeId");

                    b.ToTable("DCExpense");
                });

            modelBuilder.Entity("SGF.Models.DCExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DCExpenseType");
                });

            modelBuilder.Entity("SGF.Models.DryCargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ArrivalDate");

                    b.Property<DateTime>("DepartureDate");

                    b.Property<string>("Material");

                    b.Property<int?>("ShippingCompanyId");

                    b.Property<double>("TotalKM");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ShippingCompanyId");

                    b.ToTable("DryCargo");
                });

            modelBuilder.Entity("SGF.Models.ShippingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactName");

                    b.Property<int>("Telephone");

                    b.HasKey("Id");

                    b.ToTable("ShippingCompany");
                });

            modelBuilder.Entity("SGF.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Uf");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("SGF.Models.City", b =>
                {
                    b.HasOne("SGF.Models.DryCargo")
                        .WithMany("Cities")
                        .HasForeignKey("DryCargoId");

                    b.HasOne("SGF.Models.ShippingCompany")
                        .WithMany("Coverage")
                        .HasForeignKey("ShippingCompanyId");
                });

            modelBuilder.Entity("SGF.Models.DCExpense", b =>
                {
                    b.HasOne("SGF.Models.DryCargo")
                        .WithMany("Expenses")
                        .HasForeignKey("DryCargoId");

                    b.HasOne("SGF.Models.DCExpenseType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("SGF.Models.DryCargo", b =>
                {
                    b.HasOne("SGF.Models.ShippingCompany", "ShippingCompany")
                        .WithMany()
                        .HasForeignKey("ShippingCompanyId");
                });
#pragma warning restore 612, 618
        }
    }
}
